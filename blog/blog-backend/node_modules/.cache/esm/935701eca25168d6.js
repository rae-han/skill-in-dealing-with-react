let Joi,User;_a25‍.x([["register",()=>register],["login",()=>login],["check",()=>check],["logout",()=>logout]]);_a25‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_a25‍.w("../../models/user",[["default",["User"],function(v){User=v}]]);


// const MAX_AGE = 1000*60*60*24*7;
/*
  POST /api/auth/register
  {
    username: String,
    password: String
  }
*/
       const register = async ctx => {
  const schema = Joi.object().keys({
    username: Joi.string()
      .alphanum()
      .min(3).max(20)
      .required(),
    password: Joi.string().required(),
  })

  const result = schema.validate(ctx.request.body);

  if(result.error) {
    ctx.status = 400;
    ctx.body = result.error;
    return;
  }

  const { username, password } = ctx.request.body;
  try {
    const exists = await User.findByUsername(username);
    if(exists) {
      ctx.status = 409; // conflict
      return;
    }

    const user = new User({
      username,
    })
    await user.setPassword(password);
    await user.save();

    // const data = user.toJSON();
    // delete data.hashedPassword;
    // ctx.body = data;
    ctx.body = user.serialize();

    const token = user.generateToken();
    ctx.cookies.set('access_token', token, {
      maxAge: 1000*60*60*24*7, // 7days
      httpOnly: true
    })
  } catch (e) {
    ctx.throw(500, e)
  }
}

       const login = async ctx => {
  const { username, password } = ctx.request.body

  if(!username || !password) {
    ctx.status = 401;
    return;
  }

  try {
    const user = await User.findByUsername(username)

    if(!user) {
      ctx.status = 401;
      return;
    }
    const valid = await user.checkPassword(password);
    if(!valid) {
      ctx.status = 401;
      return;
    }
    ctx.body = user.serialize()

    const token = user.generateToken();
    ctx.cookies.set('access_token', token, {
      maxAge: 1000*60*60*24*7, // 7days
      httpOnly: true
    })
  } catch (e) {
    ctx.throw(500, e)
  }
}

       const check = async ctx => {
  const { user } = ctx.state;
  _a25‍.g.console.log(user)
  if(!user) {
    ctx.status = 401;
    return;
  }
  ctx.body = user;
}

       const logout = async ctx => {

}